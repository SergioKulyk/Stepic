# kaprekar_step(L) ver.2

# Давайте обновим нашу функцию kaprekar_step(L) для работы с числами любой длинны
# Напишите функцию kaprekar_step(L),
# принимающую на вход список натуральных чисел (цифр из которых состоит число,
# проходящее через процесс Капрекара), проводит 1 шаг сходимости к числу Капрекара и возвращает получившееся число.
#
# Функция должна сформировать внутри 2 числа:
# в порядке увеличения цифр в исходном списке
# в порядке уменьшения цифр в исходном списке
# Вычесть из большего числа меньшее и вернуть результат.
#
# Примечание. В этой задаче не нужно ничего считывать и ничего выводить на печать. Только реализовать функцию.
# Sample Input 1:
#
# [5, 6, 3]
# Sample Output 1:
#
# 297
# Sample Input 2:
#
# [2, 7, 1, 8]
# Sample Output 2:
#
# 7443
# Sample Input 3:
#
# [5, 4, 9, 9, 4, 5]
# Sample Output 3:
#
# 549945

def kaprekar_step(L):
    a = ''.join(map(str, sorted(L)))
    b = int(a[::-1])
    a = int(a)
    return b - a
