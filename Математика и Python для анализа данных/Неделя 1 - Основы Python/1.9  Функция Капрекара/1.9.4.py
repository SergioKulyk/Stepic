# kaprekar_loop(n) с валидацией входных данных

# Давайте улучшим нашу функцию kaprekar_loop(n). В документации к числу Капрекара мы видим, что процесс возможен при условии, что:
# число больше 1000
# не все цифры одинаковые
# Давайте добавим в нашу функцию проверку этих 2 условий. И при их наступлении выведем сообщение об ошибке, прервав процесс Капрекара:
# "Ошибка! На вход подано число 1000"
# "Ошибка! На вход подано число {} - все цифры одинаковые"
# Вместо {} необходимо подставить число n.
#
# Примечание. В этой задаче не нужно ничего считывать и ничего выводить на печать. Только реализовать функцию.
# Sample Input 1:
#
# 1000
# Sample Output 1:
#
# Ошибка! На вход подано число 1000
# Sample Input 2:
#
# 1111
# Sample Output 2:
#
# Ошибка! На вход подано число 1111 - все цифры одинаковые
# Sample Input 3:
#
# 6174
# Sample Output 3:
#
# 6174
# Sample Input 4:
#
# 8654
# Sample Output 4:
#
# 8654
# 4086
# 8172
# 7443
# 3996
# 6264
# 4176
# 6174

def numerics(n):
    return list(map(int, list(str(n))))

def kaprekar_step(L):
    a = ''.join(map(str, sorted(L)))
    b = int(a[::-1])
    a = int(a)
    return b - a

def kaprekar_loop(n):
    if n == 1000:
        print("Ошибка! На вход подано число 1000")
    elif len(set(str(n))) == 1:
        print("Ошибка! На вход подано число", n, "- все цифры одинаковые")
    else:
        while n != 6174:
            print(n)
            n = kaprekar_step(numerics(n))
        print(n)

# print(kaprekar_loop(1000))
# print(kaprekar_loop(1111))
# print(kaprekar_loop(6174))
# print(kaprekar_loop(3214))